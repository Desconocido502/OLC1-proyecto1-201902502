
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Main.*;
import Main.NodeType.Types;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\012\000\002\011\004" +
    "\000\002\011\003\000\002\012\003\000\002\012\003\000" +
    "\002\015\002\000\002\006\010\000\002\013\004\000\002" +
    "\013\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\007\004\000\002\007\003\000\002\016\002" +
    "\000\002\010\007\000\002\010\004\000\002\017\002\000" +
    "\002\005\012\000\002\020\002\000\002\005\012\000\002" +
    "\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\004\006\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\006\002\000\004\006\001\002\000\010" +
    "\003\011\007\013\012\017\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\004\015\111\001\002" +
    "\000\012\003\ufff9\007\ufff9\012\ufff9\016\ufff9\001\002\000" +
    "\004\011\052\001\002\000\012\003\011\007\013\012\017" +
    "\016\033\001\002\000\012\003\ufffb\007\ufffb\012\ufffb\016" +
    "\ufffb\001\002\000\012\003\ufffa\007\ufffa\012\ufffa\016\ufffa" +
    "\001\002\000\004\006\020\001\002\000\004\007\021\001" +
    "\002\000\004\011\022\001\002\000\004\010\023\001\002" +
    "\000\006\013\025\014\024\001\002\000\004\015\uffdd\001" +
    "\002\000\004\015\uffdf\001\002\000\004\015\027\001\002" +
    "\000\012\003\uffde\007\uffde\012\uffde\016\uffde\001\002\000" +
    "\004\015\031\001\002\000\012\003\uffdc\007\uffdc\012\uffdc" +
    "\016\uffdc\001\002\000\012\003\ufffc\007\ufffc\012\ufffc\016" +
    "\ufffc\001\002\000\004\016\034\001\002\000\004\016\035" +
    "\001\002\000\004\016\036\001\002\000\006\003\037\007" +
    "\040\001\002\000\004\015\051\001\002\000\004\006\045" +
    "\001\002\000\010\003\037\005\043\007\040\001\002\000" +
    "\010\003\uffe3\005\uffe3\007\uffe3\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002\000\010\003\uffe4\005\uffe4\007\uffe4\001" +
    "\002\000\004\017\046\001\002\000\004\015\uffe2\001\002" +
    "\000\004\015\050\001\002\000\010\003\uffe1\005\uffe1\007" +
    "\uffe1\001\002\000\010\003\uffe0\005\uffe0\007\uffe0\001\002" +
    "\000\004\010\053\001\002\000\024\003\061\020\054\021" +
    "\066\022\063\023\055\024\064\025\062\026\065\027\060" +
    "\001\002\000\026\003\uffef\015\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\001\002" +
    "\000\024\003\061\020\054\021\066\022\063\023\055\024" +
    "\064\025\062\026\065\027\060\001\002\000\026\003\061" +
    "\015\ufff8\020\054\021\066\022\063\023\055\024\064\025" +
    "\062\026\065\027\060\001\002\000\026\003\ufff5\015\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\001\002\000\024\003\061\020\054\021\066" +
    "\022\063\023\055\024\064\025\062\026\065\027\060\001" +
    "\002\000\022\020\101\021\075\022\102\023\073\024\077" +
    "\025\074\026\076\027\100\001\002\000\024\003\061\020" +
    "\054\021\066\022\063\023\055\024\064\025\062\026\065" +
    "\027\060\001\002\000\026\003\uffee\015\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\001\002\000\024\003\061\020\054\021\066\022\063\023" +
    "\055\024\064\025\062\026\065\027\060\001\002\000\024" +
    "\003\061\020\054\021\066\022\063\023\055\024\064\025" +
    "\062\026\065\027\060\001\002\000\026\003\uffed\015\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\001\002\000\026\003\ufff1\015\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\001\002\000\024\003\061\020\054\021\066\022\063" +
    "\023\055\024\064\025\062\026\065\027\060\001\002\000" +
    "\026\003\ufff3\015\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\001\002\000\026\003" +
    "\ufff0\015\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\001\002\000\026\003\uffe6\015" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\001\002\000\026\003\uffe7\015\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\001\002\000\026\003\uffea\015\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\001\002\000\026\003\uffec\015\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\001\002" +
    "\000\026\003\uffeb\015\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\001\002\000\026" +
    "\003\uffe5\015\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\001\002\000\026\003\uffe8" +
    "\015\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\001\002\000\026\003\uffe9\015\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\001\002\000\024\003\061\020\054\021\066" +
    "\022\063\023\055\024\064\025\062\026\065\027\060\001" +
    "\002\000\026\003\ufff4\015\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\001\002\000" +
    "\004\015\107\001\002\000\026\003\ufff6\015\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\001\002\000\012\003\ufff7\007\ufff7\012\ufff7\016\ufff7" +
    "\001\002\000\026\003\ufff2\015\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\001\002" +
    "\000\012\003\uffdb\007\uffdb\012\uffdb\016\uffdb\001\002\000" +
    "\006\002\uffff\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\010\002\006\003\004\004\003\001\001\000" +
    "\002\001\001\000\004\004\111\001\001\000\012\005\015" +
    "\006\011\011\013\012\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\015\006\011\012\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\027\001\001\000\004\017\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\040\010\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\055\014\056\001\001\000\002\001\001" +
    "\000\004\014\107\001\001\000\006\014\105\015\104\001" +
    "\001\000\002\001\001\000\004\014\102\001\001\000\002" +
    "\001\001\000\004\014\071\001\001\000\002\001\001\000" +
    "\004\014\067\001\001\000\004\014\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Container ct = new Container();
    Comparacion comparacion = new Comparacion();
    Reporte rep = new Reporte();
    //nodo afnd

    public static int contID = 1;
    public static int IDS = 1;
    public static int idInicio = 0;
    public static int idFinal = 1;
    public static Nodo Root;

    public static void graphTree(Nodo current, String name){
        FileWriter file = null;
        PrintWriter pw = null;

        try{
            file = new FileWriter("src/ARBOLES_201902502/" + name + ".dot");
            pw = new PrintWriter(file);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=box]");
            pw.println("concentrate=true");
            pw.println(current.getInternalCode());
            pw.println("}");
        } catch (Exception e){  
            System.err.println("error, no se realizo el archivo" + e);
        } finally {
            try{
                if(file != null){
                    file.close();
                }
            }catch(Exception e2){
                e2.printStackTrace();
            }
        }

        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //dirección del archivo dot
              //src/AFD_201902502/
            String fileInputPath = "src/ARBOLES_201902502/" + name + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "src/ARBOLES_201902052/" + name + ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }

    //                                   Errores Sintacticos
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        //Falta agregar los errores
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        //Falta agregar para errores
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String temp = "";
    String temp2 = "";
    String temp3 = "";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              String RESULT =null;
		
    comparacion.comparar();
    comparacion.printLists();
    rep.ReporteHTML("Reporte");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS S 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= S 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= allave PRIMERAP porcentajes porcentajes porcentajes porcentajes COMPARACIONES cllave 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PRIMERAP ::= PRIMERAP PART 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMERAP",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PRIMERAP ::= PART 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMERAP",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PART ::= CONJUNTOS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PART ::= ERG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo value = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
    String prim = IDS + "";
    String ult = IDS + "";
    String prime;
    String ulti;
    Nodo newEnd = new Nodo("#", Types.ROOT, null, null, parser.contID, parser.IDS, "N", prim, ult);
    parser.contID++;
    if(value.getAnulable() == "A"){
        prime = value.getPrimero() + ult;
    }else{
        prime = value.getPrimero();
    }
    String ultposA = value.getUltimo();
    String primposB = newEnd.getPrimero();
    String aux[] = ultposA.split(",");
    for(int i = 0; i < aux.length; i++){
        ct.añadirSiguiente(aux[i], primposB);
    }
    ct.añadirSiguiente(IDS+"", "--");
    ct.añadirSiguiente(IDS+"", "#");
    ulti = newEnd.getUltimo();
    Nodo newRoot = new Nodo(".", Types.ROOT, value, newEnd, parser.contID, 0, "N", prime, ulti);
    parser.Root = newRoot;
    graphTree(newRoot, a);
    ct.graficarSiguientes(a);
    ct.Transicion(prime, ulti);
    ct.graficarTransiciones(a);
    ct.graficarAutomatas(a);
    ct.clear();
    String expre = comparacion.Expresion();
    Expresiones exg = new Expresiones(a, expre);
    Main.Comparacion.lista_de_expresiones.add(exg);
    comparacion.clearStacks();
    //graficar afnd
    parser.idInicio = 0;
    parser.idFinal = 1;
    Main.Container.n = 1;
    IDS = 1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ERG ::= nombres resta mayor EXPRESIONES NT$0 pcoma 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo value = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERG",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESIONES ::= EXPRESIONES NOTACIONER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESIONES ::= NOTACIONER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NOTACIONER ::= or NOTACIONER NOTACIONER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String anu;
                    if(a.getAnulable() == "A" || b.getAnulable() == "A"){
                        anu = "A";
                    }else{
                        anu = "N";
                    }
                    String prim = a.getPrimero() + b.getPrimero();
                    String ult = a.getUltimo() + b.getUltimo();
                    Nodo newOr = new Nodo("|", Types.DISJUNCTION, a, b, parser.contID, 0, anu, prim, ult);

                    parser.contID++;
                    
                    //Comparacion
                    String first, second, ex1;
                    first = comparacion.pop();
                    second = comparacion.pop();
                    ex1 = "(" + second + "|" + first + ")";
                    comparacion.add(ex1);
                    RESULT = newOr;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NOTACIONER ::= concatenacion NOTACIONER NOTACIONER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String anu, prim, ult;
                    String ultposA = a.getUltimo();
                    String primposB = b.getPrimero();
                    if(a.getAnulable() == "A" && b.getAnulable() == "A"){
                        anu = "A";
                    }else{
                        anu = "N";
                    }

                    if(a.getAnulable() == "A"){
                        prim = a.getPrimero() + b.getPrimero();
                    }else{
                        prim = a.getPrimero();
                    }

                    if(b.getAnulable() == "A"){
                        ult = a.getUltimo() + b.getUltimo();
                    }else{
                        ult = b.getUltimo();
                    }

                    String aux[] = ultposA.split(",");
                    for(int i = 0; i < aux.length; i++){
                        ct.añadirSiguiente(aux[i], primposB);
                    }

                    Nodo newConcatenation = new Nodo(".", Types.CONCATENATION, a, b, parser.contID, 0, anu, prim, ult);

                    parser.contID++;

                    //Comparacion
                    String first, second, ex1;
                    first = comparacion.pop();
                    second = comparacion.pop();
                    ex1 = "(" + second + first + ")";
                    comparacion.add(ex1);
                    //afnd
                    parser.idInicio++;
                    parser.idFinal++;
                    RESULT = newConcatenation;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NOTACIONER ::= suma NOTACIONER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    String prim = a.getPrimero();
                    String ult = a.getUltimo();
                    String aux[] = ult.split(",");

                    for(int i = 0; i < aux.length; i++){
                        ct.añadirSiguiente(aux[i], prim);
                    }
                    Nodo newPositive = new Nodo("+", Types.POSITIVE_LOCK, null, a, parser.contID, 0, "N", prim, ult);

                    parser.contID++;

                    //Comparacion
                    String first, ex1;
                    first = comparacion.pop();
                    ex1 = "(" + first + ")" + "+";
                    comparacion.add(ex1);
                    RESULT = newPositive;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NOTACIONER ::= asterisco NOTACIONER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String prim = a.getPrimero();
                    String ult = a.getUltimo();
                    String aux[] = ult.split(",");

                    for(int i = 0; i < aux.length; i++){
                        ct.añadirSiguiente(aux[i], prim);
                    }

                    Nodo newKleene = new Nodo("*", Types.KLEENE_LOCK, null, a, parser.contID, 0, "A", prim, ult);

                    parser.contID++;

                    //Comparacion
                    String first, ex1;
                    first = comparacion.pop();
                    ex1 = "(" + first + ")" + "*";
                    comparacion.add(ex1);
                    RESULT = newKleene;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NOTACIONER ::= interrogacion NOTACIONER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String prim = a.getPrimero();
                    String ult = a.getUltimo();
                    String aux[] = ult.split(",");

                    Nodo newBoolean = new Nodo("?", Types.BOOLEAN_LOCK, null, a, parser.contID, 0, "N", prim, ult);

                    parser.contID++;

                    //Comparacion
                    String first, ex1;
                    first = comparacion.pop();
                    ex1 = "(" + first + ")" + "?";
                    comparacion.add(ex1);
                    RESULT = newBoolean;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NOTACIONER ::= id_conjuntoER 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String prim= IDS+",";
                    String ult= IDS+",";
                    Nodo newIdConEr = new Nodo(val.replace("{","").replace("}",""), Types.NULL, null, null, parser.contID, parser.IDS, "N", prim, ult);
                    ct.añadirSiguiente(IDS + "", val.replace("{","").replace("}",""));
                    comparacion.add(val.replace("{"," ").replace("}"," "));

                    parser.IDS++;
                    parser.contID++;
                    RESULT = newIdConEr;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NOTACIONER ::= especial_conjER 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String prim= IDS+",";
                    String ult= IDS+",";             
                    Nodo newGuion = new Nodo(val, Types.NULL, null, null, parser.contID, parser.IDS, "N", prim, ult);
                    ct.añadirSiguiente(IDS + "", val.replace("\"", ""));
                    comparacion.add(val);

                    parser.IDS++;
                    parser.contID++;
                    RESULT=newGuion;                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NOTACIONER ::= c_conjuntoER 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String prim= IDS+",";
                    String ult= IDS+",";
                    Nodo nuevoDec = new Nodo(val, Types.NULL, null, null, parser.contID, parser.IDS, "N", prim, ult);
                    ct.añadirSiguiente(IDS + "", val.replace("\"", ""));
                    comparacion.add(val);

                    parser.IDS++;
                    parser.contID++;
                    RESULT = nuevoDec;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NOTACIONER ::= error asterisco 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NOTACIONER ::= error concatenacion 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NOTACIONER ::= error c_conjuntoER 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NOTACIONER ::= error especial_conjER 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NOTACIONER ::= error id_conjuntoER 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NOTACIONER ::= error interrogacion 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NOTACIONER ::= error suma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NOTACIONER ::= error or 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMPARACIONES ::= COMPARACIONES COMP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMPARACIONES ::= COMP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$1 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

            Encadenado cad_a_comparar = new Encadenado(a, b);
            Main.Comparacion.lista_de_cadenas.add(cad_a_comparar);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMP ::= nombres dospuntos cadenarevi2 NT$1 pcoma 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COMP ::= error pcoma 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$2 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Conjuntos c = new Conjuntos(a, b.replace("~", "-"));
                comparacion.addConjunto(a, b.replace("~", "-"));
                Main.Comparacion.lista_de_conjunto.add(c);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONJUNTOS ::= id_conj dospuntos nombres resta mayor notacionj NT$2 pcoma 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$3 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                comparacion.addConjunto(a, b.replace(",", ""));
                Conjuntos c2 = new Conjuntos(a, b);
                Main.Comparacion.lista_de_conjunto.add(c2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONJUNTOS ::= id_conj dospuntos nombres resta mayor notacionj2 NT$3 pcoma 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONJUNTOS ::= error pcoma 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
