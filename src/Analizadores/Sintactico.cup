package Analizadores;
import java_cup.runtime.*;
import Main.*;
import Main.NodeType.Types;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

parser code
{:  
    Container th = new Container();
    Comparacion re = new Comparacion();
    Reporte reporte = new Reporte();
    //NodoAFND afnd= new NodoAFND();
    public static int contId=1;
    public static int IDS=1;
    public static int idI=0;
    public static int idF=1;
    public static Nodo Raiz;

    public static String graphTree(Nodo node){
        String cadena = "";

        if((node.hder == null) && (node.hizq == null)){
            cadena = "nodo" + String.valueOf(node.getId()) + "[label =\" " + node.getValor() + "\"];\n";
        }else{
            cadena = "nodo" + String.valueOf(node.getId())+"[label =\"<C0>| " + node.getValor() + "|<C1> \"]; \n";
        }

        if(node.hizq != null){
            cadena = cadena + node.hizq.getCodigoInterno() + "nodo" + String.valueOf(node.getId()) + "C0->nodo" + String.valueOf(node.hizq.getId()) + "\n";
        }

        if(node.hder != null){
            cadena = cadena + node.hder.getCodigoInterno() + "nodo" + String.valueOf(node.getId()) + "C1->nodo" + String.valueOf(node.hder.getId()) + "\n";
        }
        return cadena;
    }

    public static void graficarArbol(Nodo act, String nombre){
    FileWriter fichero = null;
    PrintWriter pw = null;
    try {
    fichero = new FileWriter("src/ARBOLES_201902502/" + nombre + ".dot");
    pw = new PrintWriter(fichero);
    pw.println("digraph G{");
    pw.println("rankdir=UD");
    pw.println("node[shape=box]");
    pw.println("concentrate=true");
    pw.println(act.getCodigoInterno());
    pw.println("}");
    } catch (Exception e) {
        System.out.println("error, no se realizo el archivo"+e);
    } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección donde se encuentra el compilador de graphviz
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "src/ARBOLES_201902502/" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "src/ARBOLES_201902502/" + nombre + ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }
   
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        // Errores newError= new Errores("Error sintactico: recuperado",s.value.toString(), s.right+1, s.left+1);
         //proyectocompi1.Reporte.listaErrores.add(newError);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        //Errores newError= new Errores("Error sintactico: no recuperado",s.value.toString(), s.right+1, s.left+1);
        //proyectocompi1.Reporte.listaErrores.add(newError);    
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
 String tmp="";
  String tmp2="";
  String tmp3="";
  
:}

terminal String allave, cllave, dospuntos, id_conj, nombres, resta,mayor, notacionj, notacionj2, pcoma, porcentajes,cadenarevi2, id_conjuntoER, c_conjuntoER, especial_conjER ,suma,concatenacion,interrogacion,asterisco, or;

non terminal String  INICIO, SENTENCIAS, S, CONJUNTOS, ERG, COMPARACIONES, COMP, PRIMERAP, PART;

non terminal Nodo EXPRESIONES, NOTACIONER;

precedence left suma, asterisco, interrogacion;
precedence left concatenacion, or;

start with INICIO;

INICIO::= SENTENCIAS{: 
         re.comparacion();
         re.printLists();
         reporte.ReporteHTML("Reporte");
         :};

SENTENCIAS::= SENTENCIAS  S 
            |S  
;

S::= allave PRIMERAP porcentajes porcentajes porcentajes porcentajes COMPARACIONES cllave;

PRIMERAP::= PRIMERAP PART
            |PART;

PART::=  CONJUNTOS
        |ERG
        ;

ERG::= nombres:a resta mayor EXPRESIONES:valor{:
    String prim= IDS+"";
    String ult= IDS+"";
    String prime;
    String ulti;
    Nodo nuevofinal = new Nodo(null,null,"#",parser.contId, parser.IDS,"N",prim,ult, Types.LEAF);
    parser.contId++;
    if(valor.getAnulable()=="A"){
        prime=valor.getPrimero()+ult;
    }else{
        prime=valor.getPrimero();
    }
    String ultposA=valor.getUltimo();
    String primposB=nuevofinal.getPrimero();
    String []aux= ultposA.split(",");
    for (int i = 0; i < aux.length; i++) {
        th.añadirSiguiente(aux[i],primposB);
     }
     th.añadirSiguiente(IDS+"","--");
     th.añadirSiguienteN(IDS+"","#");
        ulti=nuevofinal.getUltimo();
    Nodo nuevaraiz = new Nodo(valor, nuevofinal, ".", parser.contId,0,"N",prime,ulti, Types.LEAF);
    parser.Raiz = nuevaraiz;
    graficarArbol(nuevaraiz,a);
    //System.out.println(graphTree(nuevaraiz.hizq));
    th.graficarSiguientes(a);
    th.Transicion(prime,ulti);
    th.graficarTransiciones(a);
    th.graficarAutomatas(a);
    th.clear();
    //Se crea el afnd
    reporte.graphAFND(nuevaraiz.hizq, a); //Se le manda el lado izquierdo por que el resto superior no es util
    String ex= re.Expresion();
    Expresiones exg = new Expresiones(a,ex);
    Main.Comparacion.lista_de_expresiones.add(exg);
    re.clearStacks();
    //afnd.graficarAfnd(a);
    parser.idI=0;
    parser.idF=1;
    Main.Container.n=1;
    IDS=1;
:} pcoma
;

EXPRESIONES::=EXPRESIONES NOTACIONER:a{:RESULT= a;:}
            |NOTACIONER:a{:RESULT= a;:}
            ;
NOTACIONER::= or NOTACIONER:a NOTACIONER:b{:
                String an;
                if(a.getAnulable()=="A" || b.getAnulable()=="A"){
                    an="A";
                }else{
                    an="N";
                }
                String prim= a.getPrimero()+b.getPrimero();
                String ult= a.getUltimo()+b.getUltimo();
                Nodo nuevaor = new Nodo(a, b, "|", parser.contId,0,an,prim,ult, Types.DISYUNCTION);
                
                parser.contId++;
                //revision
                String primero;
                String segundo;
                String ex;
                primero=re.pop();
                segundo= re.pop();
                ex="("+segundo+"|"+ primero+")";
                re.add(ex);
                RESULT = nuevaor;
            :}
            |concatenacion NOTACIONER:a NOTACIONER:b{:
                String an;
                String prim;
                String ult;
                String ultposA=a.getUltimo();
                String primposB=b.getPrimero();
                if(a.getAnulable()=="A" && b.getAnulable()=="A"){
                    an="A";
                }else{
                    an="N";
                }
                if(a.getAnulable()=="A"){
                    prim=a.getPrimero()+b.getPrimero();
                }else{
                    prim=a.getPrimero();
                }
                if(b.getAnulable()=="A"){
                    ult=a.getUltimo()+b.getUltimo();
                }else{
                    ult=b.getUltimo();
                }
                String []aux= ultposA.split(",");
                for (int i = 0; i < aux.length; i++) {
                    th.añadirSiguiente(aux[i],primposB);
                }
                Nodo nuevacon = new Nodo(a, b, ".", parser.contId,0,an,prim,ult, Types.CONCATENATION);
               
                parser.contId++;
               //revision
               String primero;
                String segundo;
                String ex;
                primero=re.pop();
                segundo= re.pop();
                ex="("+segundo+ primero+")";
                re.add(ex);
                //afnd.addAFND(idI,"\""+ a.getValor()+"\"","\""+b.getValor()+"\"",idF,"");
                parser.idI++;
                parser.idF++;
                RESULT = nuevacon;
            :}
            
            |suma NOTACIONER:a{:
                String prim= a.getPrimero();
                String ult= a.getUltimo();
                String []aux= ult.split(",");
                for (int i = 0; i < aux.length; i++) {
                    th.añadirSiguiente(aux[i],prim);
                }
                Nodo nuevasuma = new Nodo(a, null, "+", parser.contId, 0,"N",prim,ult, Types.POSITIVE_LOCK);
                
                parser.contId++;
                //revision
                String primero;
                String ex;
                primero=re.pop();
                ex="("+primero+")"+"+";
                re.add(ex);
                RESULT = nuevasuma;
            :}
            |asterisco NOTACIONER:a {:
                String prim= a.getPrimero();
                String ult= a.getUltimo();
                String []aux= ult.split(",");
                for (int i = 0; i < aux.length; i++) {
                    th.añadirSiguiente(aux[i],prim);
                }
                Nodo nuevaasterisco = new Nodo(a, null, "*", parser.contId,0,"A",prim,ult, Types.KLEENE_LOCK);
                
                parser.contId++;
               //revision
               String primero;
                String ex;
                primero=re.pop();
                ex="("+primero+")"+"*";
                re.add(ex);
                RESULT = nuevaasterisco;
            :}
            |interrogacion NOTACIONER:a{:
                String prim= a.getPrimero();
                String ult= a.getUltimo();
                Nodo nuevainterrogacion = new Nodo(a, null, "?", parser.contId,0,"A",prim,ult, Types.BOOLEAN_LOCK);
                
                parser.contId++;
                //revision
                String primero;
                String ex;
                primero=re.pop();
                ex="("+primero+")"+"?";
                re.add(ex);
                RESULT = nuevainterrogacion;
            :}
            |id_conjuntoER:val {:
                String prim= IDS+",";
                String ult= IDS+",";
                Nodo nuevoidconer = new Nodo(null,null,val.replace("{","").replace("}",""),parser.contId,parser.IDS,"N",prim,ult,Types.LEAF);
                th.añadirSiguienteN(IDS+"",val.replace("{","").replace("}",""));
                re.add(val.replace("{"," ").replace("}"," "));
                
                parser.IDS++;
                parser.contId++;
                
                RESULT = nuevoidconer;
            :} 
            |especial_conjER :val{:
                String prim= IDS+",";
                String ult= IDS+",";
                Nodo nuevoguion = new Nodo(null,null,val,parser.contId,parser.IDS,"N",prim,ult, Types.LEAF);
                th.añadirSiguienteN(IDS+"",val.replace("\"",""));
                re.add(val);
                

                parser.IDS++;
                parser.contId++;
                RESULT = nuevoguion;
            :}
            |c_conjuntoER:val{:
                String prim= IDS+",";
                String ult= IDS+",";
                Nodo nuevoDec = new Nodo(null,null,val,parser.contId, parser.IDS,"N",prim,ult, Types.LEAF);
                th.añadirSiguienteN(IDS+"",val.replace("\"",""));
                re.add(val);
                

                parser.IDS++;
                parser.contId++;
                RESULT = nuevoDec;
            :}
            |error asterisco
            |error concatenacion
            |error c_conjuntoER
            |error especial_conjER
            |error id_conjuntoER
            |error interrogacion
            |error suma
            |error or;

COMPARACIONES::= COMPARACIONES COMP
            |COMP;

COMP::= nombres:a dospuntos cadenarevi2:b{: 
            Encadenado cadrev= new Encadenado(a,b);
            Main.Comparacion.lista_de_cadenas.add(cadrev);:} pcoma
        |error pcoma;

CONJUNTOS::= id_conj dospuntos nombres:a resta mayor notacionj:b{:
            Conjuntos c = new Conjuntos(a,b.replace("~", "-"));
            re.addConjunto(a,b.replace("~", "-"));
            Main.Comparacion.lista_de_conjunto.add(c);
            :} pcoma
            |id_conj dospuntos nombres:a resta mayor notacionj2:b{:
            re.addConjunto(a,b.replace(",",""));
            Conjuntos c2 = new Conjuntos(a,b);
            Main.Comparacion.lista_de_conjunto.add(c2);:} pcoma
            |error pcoma;